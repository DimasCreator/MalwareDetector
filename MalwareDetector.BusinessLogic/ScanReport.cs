using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;

namespace MalwareDetector.BusinessLogic
{
    /// <summary>
    /// Отчет о сканировании директории.
    /// </summary>
    public class ScanReport
    {
        private readonly ConcurrentBag<FileReport> _fileReports = new();
        private DateTime? _startTime;
        private DateTime? _endTime;
        private bool _isComplete = false;
        private IEnumerable<ScanRule> _scanRules;

        /// <summary>
        /// Конструктор.
        /// </summary>
        /// <param name="scanRules">Список правил сканирования</param>
        public ScanReport(IEnumerable<ScanRule> scanRules)
        {
            _scanRules = scanRules;
        }
        /// <summary>
        /// Добавляет отчет о файле.
        /// </summary>
        /// <param name="fileReport">Отчет о файле.</param>
        internal void AddFileReport(FileReport fileReport)
        {
            _fileReports.Add(fileReport);
        }
        /// <summary>
        /// Возвращает колличество отчетов, соответствующих определенному типу.
        /// </summary>
        /// <param name="type">Тип по которому отбираются отчеты.</param>
        /// <returns>Количество отчетов, соответствующих типу.</returns>
        public int GetAmountByType(FileReportType type)
        {
            return _fileReports.Count(report => report.ReportType == type);
        }
        /// <summary>
        /// Возвращает колличество отчетов, соответствующих определенному правилу сканирования.
        /// </summary>
        /// <param name="rule">Правило сканирования по которому отбираются отчеты.</param>
        /// <returns>Количество отчетов, соответствующих правилу.<</returns>
        public int GetAmountByRule(ScanRule rule)
        {
            return _fileReports.Count(report => report.Rule == rule);
        }
        /// <summary>
        /// Возвращает общее количество отчетов.
        /// </summary>
        /// <returns>Общее количество отчетов.</returns>
        public int GetAmount()
        {
            return _fileReports.Count;
        }
        /// <summary>
        /// Начинает отсчет времени сканирования.
        /// </summary>
        internal void StartScanning()
        {
            _startTime ??= DateTime.Now;
        }
        /// <summary>
        /// Возвращает информацию о том, завершено сканирование или нет.
        /// </summary>
        /// <returns>True, если сканирование завершено.</returns>
        internal bool IsComplete()
        {
            return _isComplete;
        }
        /// <summary>
        /// Завершает отсчет времени и устанавливает состояние сканирования как завершенное.
        /// </summary>
        internal void EndScanning()
        {
            _endTime ??= DateTime.Now;
            _isComplete = true;
        }
        /// <summary>
        /// Возвращает время сканирования.
        /// </summary>
        /// <returns>Время сканирования.</returns>
        public TimeSpan? GetScanningTime()
        {
            _endTime ??= DateTime.Now;
            return _endTime - _startTime;
        }
        /// <summary>
        /// Возвращает правила, по которым производилось сканирование.
        /// </summary>
        /// <returns>Правила сканирования</returns>
        public IEnumerable<ScanRule> GetScanRules()
        {
            return _scanRules;
        }
    }
}
