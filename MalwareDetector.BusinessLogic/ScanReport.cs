using System;
using System.Collections.Concurrent;
using System.Linq;

namespace MalwareDetector.BusinessLogic
{
    /// <summary>
    /// Отчет о сканировании директории
    /// </summary>
    public class ScanReport
    {
        private ConcurrentBag<FileReport> _fileReports = new ConcurrentBag<FileReport>();
        private DateTime? _startTime;
        private DateTime? _endTime;
        private bool _isReady = false;
        /// <summary>
        /// Добавляет отчет о файле.
        /// </summary>
        /// <param name="fileReport">Отчет о файле</param>
        public void AddFileReport(FileReport fileReport)
        {
            _fileReports.Add(fileReport);
        }
        /// <summary>
        /// Возвращает колличество отчетов, соответствующих определенному типу.
        /// </summary>
        /// <param name="type">Тип по которому отбираются отчеты</param>
        /// <returns>Количество отчетов, соответствующих типу</returns>
        public int GetAmountByType(FileReportType type)
        {
            return _fileReports.Where(report => report.ReportType == type).Count();
        }
        /// <summary>
        /// Возвращает колличество отчетов, соответствующих определенному правилу сканирования.
        /// </summary>
        /// <param name="rule">Правило сканирования по которому отбираются отчеты</param>
        /// <returns>Количество отчетов, соответствующих правилу<</returns>
        public int GetAmountByRule(ScanRule rule)
        {
            return _fileReports.Where(report => report.Rule == rule).Count();
        }
        /// <summary>
        /// Возвращает общее количество отчетов
        /// </summary>
        /// <returns>Количество отчетов</returns>
        public int GetAmount()
        {
            return _fileReports.Count;
        }
        /// <summary>
        /// Начинает отсчет времени сканирования.
        /// </summary>
        public void StartScanning()
        {
            _startTime ??= DateTime.Now;
        }
        /// <summary>
        /// Возвращает информацию о том, завершено сканирование или нет
        /// </summary>
        /// <returns>True, если сканирование завершено</returns>
        public bool IsReady()
        {
            return _isReady;
        }
        /// <summary>
        /// Завершает отсчет времени и устанавливает состояние сканирования как завершенное.
        /// </summary>
        public void EndScanning()
        {
            _endTime ??= DateTime.Now;
            _isReady = true;
        }
        /// <summary>
        /// Возвращает время сканирования
        /// </summary>
        /// <returns>Время сканирования</returns>
        public TimeSpan? GetScanningTime()
        {
            _endTime ??= DateTime.Now;
            return _endTime - _startTime;
        }
    }
}
