using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MalwareDetector.BusinessLogic
{
    /// <summary>
    /// Класс, содержащий логику сканирования файлов
    /// </summary>
    public class Scanner
    {
        private string _directoryPath { get; }

        private IEnumerable<ScanRule> _scanRules { get; }

        public Scanner(string directoryPath, IEnumerable<ScanRule> scanRules)
        {
            _directoryPath = directoryPath;
            _scanRules = scanRules;
        }
        /// <summary>
        /// Запуск процесса сканирования.
        /// </summary>
        /// <returns>Объект отчета сканирования.</returns>
        public ScanReport Scan()
        {
            ScanReport report = new ScanReport();
            report.StartScanning();

            IEnumerable<string> files = Directory.GetFiles(_directoryPath, "*", SearchOption.AllDirectories);

            Parallel.ForEach(files, file =>
            {
                bool isClear = true;
                try
                {
                    using (StreamReader reader = new StreamReader(file))
                    {
                        string text = reader.ReadToEnd();
                        string[] textStrings = text.Split("\n");
                        foreach (var rule in _scanRules)
                        {
                            if (rule.CheckFileExtension(file))
                            {
                                if (ScanText(textStrings, rule))
                                {
                                    report.AddFileReport(new FileReport(Path.GetFileName(file), FileReportType.Malware, "", rule));
                                    isClear = false;
                                    break;
                                }
                            }
                        }
                        if (isClear)
                            report.AddFileReport(new FileReport(Path.GetFileName(file), FileReportType.Clear, "", null));
                    }
                }
                catch (Exception e)
                {
                    report.AddFileReport(new FileReport(Path.GetFileName(file), FileReportType.Error, e.Message, null));
                }
            });

            report.EndScanning();
            return report;
        }

        private bool ScanText(string[] text, ScanRule rule)
        {
            foreach (var str in text)
            {
                if (str.Trim() == rule.MalwareString)
                {
                    return true;
                }
            }
            return false;
        }
    }
}
