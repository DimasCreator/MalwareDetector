using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Text;
using System.IO;
using System.Collections.Generic;
using System.Threading.Tasks;
using MalwareDetector.Service.Server.Services;
using MalwareDetector.BusinessLogic;

namespace MalwareDetector.Service.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ScanController : ControllerBase
    {
        [HttpPost]
        public async Task<IActionResult> OnPostUploadAsync(List<IFormFile> files)
        {
            string idProcess = Guid.NewGuid().ToString();
            string currentDirectory = Path.Combine(GlobalProperties.Instance.ProcessDirectoryPath, idProcess);
            Directory.CreateDirectory(currentDirectory);

            foreach (var formFile in files)
            {
                if (formFile.Length > 0)
                {
                    var filePath = Path.Combine(currentDirectory, Path.GetFileName(formFile.FileName));

                    using (var stream = System.IO.File.Create(filePath))
                    {
                        await formFile.CopyToAsync(stream);
                    }
                }
            }

            Services.ScanService scanService = new Services.ScanService(idProcess);
            scanService.StartAsync();
            
            return Ok(new { id = idProcess, Size = files.Count });
        }

        [HttpGet]
        public async Task<IActionResult> GetStatus(string id)
        {
            ProcessInfo r = CommonStorage.Instance.GetReportById(id);
            if (r == null)
            {
                Ok("Процесс с таким id не найден");
            }
            if (r.IsComplete)
            {
                return Ok(ReportDisplay(r.Report));
            }
            return Ok("Сканирование не закончено");
        }

        /// <summary>
        /// Выводит в консоль информации отчета по сканированию.
        /// </summary>
        /// <param name="report">Объект, содержащий данные о сканировании.</param>
        /// <param name="scanRule">Список используемых правил.</param>
        /// <returns>Строка информации отчета.</returns>
        private static string ReportDisplay(ScanReport report)
        {
            StringBuilder reportBuilder = new StringBuilder("====== Scan result ======\n");
            reportBuilder.AppendLine("Processed files: " + report.GetAmount());
            foreach (var rule in report.GetScanRules())
            {
                reportBuilder.AppendLine(rule.RuleName + " detected: " + report.GetAmountByRule(rule));
            }
            reportBuilder.AppendLine("Errors: " + report.GetAmountByType(FileReportType.Error));
            reportBuilder.AppendLine("Execution time: " + report.GetScanningTime());
            reportBuilder.AppendLine("=========================");
            return reportBuilder.ToString();
        }
    }
}
